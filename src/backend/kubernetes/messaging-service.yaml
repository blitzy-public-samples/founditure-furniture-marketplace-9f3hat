# Human Tasks:
# 1. Configure AWS ECR registry URL in CI/CD pipeline
# 2. Set up container image versioning strategy
# 3. Verify WebSocket port configurations in load balancer
# 4. Review resource limits based on production load testing
# 5. Configure network policies for service-to-service communication
# 6. Set up monitoring for WebSocket connection metrics
# 7. Validate Redis cluster connectivity in each environment

---
# Requirement: Real-time Messaging (1.2 System Overview/Core Features)
# Deployment configuration for messaging microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-service
  namespace: default
  labels:
    app: founditure
    service: messaging
spec:
  # Requirement: Container Orchestration (6.4 Orchestration/ECS Cluster Configuration)
  # High availability with 3 replicas for load distribution
  replicas: 3
  selector:
    matchLabels:
      app: founditure
      service: messaging
  template:
    metadata:
      labels:
        app: founditure
        service: messaging
    spec:
      containers:
        - name: messaging-service
          # Container image from AWS ECR registry
          image: ${ECR_REGISTRY}/messaging-service:${IMAGE_TAG}
          ports:
            # Requirement: Messaging Service (2.2.1 Core Components)
            # Expose both HTTP and WebSocket ports
            - containerPort: 3004
              name: http
            - containerPort: 3005
              name: websocket
          # Environment configuration from ConfigMap
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: founditure-config
                  key: NODE_ENV
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: founditure-config
                  key: REDIS_CONFIG.HOST
          # Resource allocation for predictable performance
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          # Health monitoring configuration
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10

---
# Requirement: Messaging Service (2.2.1 Core Components)
# Service configuration for internal cluster access
apiVersion: v1
kind: Service
metadata:
  name: messaging-service
  namespace: default
  labels:
    app: founditure
    service: messaging
spec:
  # Internal-only access via ClusterIP
  type: ClusterIP
  ports:
    # HTTP endpoint for REST API
    - port: 3004
      targetPort: http
      protocol: TCP
      name: http
    # WebSocket endpoint for real-time messaging
    - port: 3005
      targetPort: websocket
      protocol: TCP
      name: websocket
  selector:
    app: founditure
    service: messaging