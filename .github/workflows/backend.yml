# GitHub Actions workflow for Founditure backend CI/CD pipeline
# Requirement: 6.5 CI/CD PIPELINE/Pipeline Stages - Automated pipeline for building, testing, and deploying backend microservices
name: Backend CI/CD

# Trigger workflow on push and pull requests to main and develop branches
on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'src/backend/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/backend/**'

# Environment variables used across jobs
env:
  NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
  DOCKER_BUILDKIT: '1'

jobs:
  # Test job: Run unit tests, integration tests and code quality checks
  # Requirement: A.2 Testing Strategy - Automated testing with Jest and 80% code coverage
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package.json'

      - name: Install dependencies
        working-directory: src/backend
        run: npm ci

      - name: Run ESLint with TypeScript rules
        working-directory: src/backend
        run: npm run lint

      - name: Run Jest unit tests with coverage
        working-directory: src/backend
        run: npm run test:coverage
        env:
          CI: true

      - name: Run integration tests
        working-directory: src/backend
        run: npm run test:integration
        env:
          CI: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: src/backend/coverage
          retention-days: 14

  # Build job: Build and push Docker images to AWS ECR
  # Requirement: 6.3 CONTAINERIZATION/Container Specifications - Docker container build and deployment
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ECR_REGISTRY }}

      - name: Build and push microservice images
        working-directory: src/backend
        run: |
          # Build each microservice image
          services=("api-gateway" "auth-service" "ai-service" "listing-service" "messaging-service" "location-service" "gamification-service" "notification-service")
          
          for service in "${services[@]}"; do
            echo "Building $service image..."
            docker build \
              --cache-from ${{ secrets.ECR_REGISTRY }}/$service:latest \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --tag ${{ secrets.ECR_REGISTRY }}/$service:${{ github.sha }} \
              --tag ${{ secrets.ECR_REGISTRY }}/$service:latest \
              --file src/$service/Dockerfile .
            
            echo "Pushing $service image..."
            docker push ${{ secrets.ECR_REGISTRY }}/$service:${{ github.sha }}
            docker push ${{ secrets.ECR_REGISTRY }}/$service:latest
            
            # Save image digest for deployment
            echo "$service=${{ secrets.ECR_REGISTRY }}/$service:${{ github.sha }}" >> image_tags.txt
          done

      - name: Save image digests
        uses: actions/upload-artifact@v3
        with:
          name: image_tags
          path: src/backend/image_tags.txt

  # Deploy job: Deploy to AWS ECS with environment-specific configuration
  # Requirement: 6.5 CI/CD PIPELINE/Pipeline Stages - Automated deployment to AWS ECS
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      url: ${{ github.ref == 'refs/heads/main' && 'api.founditure.com' || 'dev-api.founditure.com' }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download image tags
        uses: actions/download-artifact@v3
        with:
          name: image_tags
          path: .

      - name: Update ECS services
        run: |
          # Read image tags
          while IFS='=' read -r service image; do
            echo "Updating $service with image $image..."
            aws ecs update-service \
              --cluster founditure-${{ env.NODE_ENV }} \
              --service $service \
              --force-new-deployment \
              --task-definition $(aws ecs describe-task-definition \
                --task-definition $service \
                --query 'taskDefinition.taskDefinitionArn' \
                --output text)
          done < image_tags.txt

      - name: Monitor ECS deployment
        run: |
          services=("api-gateway" "auth-service" "ai-service" "listing-service" "messaging-service" "location-service" "gamification-service" "notification-service")
          
          for service in "${services[@]}"; do
            echo "Monitoring deployment of $service..."
            aws ecs wait services-stable \
              --cluster founditure-${{ env.NODE_ENV }} \
              --services $service
          done

      - name: Run health checks
        run: |
          endpoint="${{ github.ref == 'refs/heads/main' && 'api.founditure.com' || 'dev-api.founditure.com' }}"
          
          # Check health endpoints for each service
          services=("api-gateway" "auth-service" "ai-service" "listing-service" "messaging-service" "location-service" "gamification-service" "notification-service")
          
          for service in "${services[@]}"; do
            echo "Checking health of $service..."
            curl -f "https://$endpoint/$service/health" || exit 1
          done